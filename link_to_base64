// http://tsemba.org/utl/base64/base64.c
/* $Id: base64.c,v 1.3 2002/11/03 21:01:02 te Exp $ */

/*
 * Copyright (c) 2002 Tamer Embaby <tsemba@menanet.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Tamer Embaby <tsemba@menanet.net>, 1-11-2000.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#if defined (UNIX)
# include <unistd.h>
#elif defined (_WINDOWS)
# include <io.h>
#endif
#include <sys/stat.h>

#define ARRAY_LEN(x)            (sizeof(x) / sizeof(x[0]))

/* Define Windows if you are compiling under Windows */
/* #define Windows */

#define BASE64_PAD_CHAR         '='

/* Line length for output base64 encoded file */
#define LINELEN                 72

/* Postfix for output base64 encoded file */
#define DEFAULT_ENC_FILE_POSTFIX        ".b64"

/* Postfix for output base64 decoded file */
#define DEFAULT_DEC_FILE_POSTFIX        ".orig"

#define CRLF                    "\r\n"

static int to_stdout = 0;

static char encode_table[] =
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

static char decode_table[256];

int base64_encode(char *,int,char **);
int base64_decode(char *,int,char **);
int base64_encode_file(char *);
int base64_decode_file(char *);
static void init_base64_conv_tables(void);
static int __read(int,char *,int);
static void usage(void);

/*
 * Initialize BASE64 decode table.
 * Must be called before decoding any buffers.
 */
static void
init_base64_conv_tables()
{
	int i;

	for (i = 0; i < 255; i++)
		decode_table[i] = 0x80;

	for (i = 'A'; i <= 'Z'; i++)
		decode_table[i] = 0 + (i - 'A');

	for (i = 'a'; i <= 'z'; i++)
		decode_table[i] = 26 + (i - 'a');

	for (i = '0'; i <= '9'; i++)
		decode_table[i] = 52 + (i - '0');

	decode_table['+'] = 62;
	decode_table['/'] = 63;
	decode_table['='] = 0;
	return;
}

/*
 * So, M$-Windowz handles `read' differetly! you request read() to get
 * 64 bytes (for example) Windows *always* return less than 64 (randomly).
 */
static int
__read(int fd, char *buffer, int count)
{
        int nread;
        int i;
        char ch;

        nread = read(fd, buffer, count);
        if (nread <= 0)
                return (nread);

        if (nread < count) {
                while (nread < count) {
                        i = read(fd, &ch, 1);
                        if (i <= 0)
                                return (nread + i);
                        buffer[nread++] = ch;
                }
        }
        return (nread);
}

/*
 * RFC-1521
 * The encoding process represents 24-bit groups of input
 * bits as output strings of 4 encoded characters. Proceeding
 * from left to right, a 24-bit input group is formed by
 * concatenating 3 8-bit input groups. These 24 bits are then
 * treated as 4 concatenated 6-bit groups, each of which is
 * translated into a single digit in the base64 alphabet.
 * When encoding a bit stream via the base64 encoding, the
 * bit stream must be presumed to be ordered with the
 * most-significant-bit first.
 *
 * That is, the first bit in the stream will be the
 * high-order bit in the first byte, and the eighth bit will
 * be the low-order bit in the first byte, and so on.
 */
/*
 * NOTE:
 * Input buffer must be multiple of three or else the buffer will be padded
 * with '='.
 */

int
base64_encode(char *inbuf, int inbuf_len, char **outbuf)
{
        unsigned char u1, u2, u3, u4;
        register int j, outbuf_len, pad;
        unsigned char buf[3];
	register char *p = inbuf;

	outbuf_len = (int)(inbuf_len * 1.5);

        *outbuf = malloc(outbuf_len);
	if (*outbuf == NULL)
		return (-1);
	memset(*outbuf, 0, outbuf_len);

        for (pad = 0, j = 0; p < inbuf + inbuf_len;) {
		if (p == inbuf + inbuf_len - 1) {
			pad = 2;
		} else if (p == inbuf + inbuf_len - 2) {
			pad = 1;
		}

		/* Fetch approp. bytes. */
		buf[0] = *p++;
		if (pad != 2)
			buf[1] = *p++;
		else
			buf[1] = 0;
		if (pad != 1)
			buf[2] = *p++;
		else
			buf[2] = 0;

		/* Encode. */
		u1 = buf[0] >> 2;
		u2 = ((buf[0] & 0x3) << 4) | (buf[1] >> 4);
		u3 = ((buf[1] & 0xf) << 2) | ((buf[2] >> 6) & 0x3);
		u4 = buf[2] & 0x3f;

		/* Store result. */
		(*outbuf)[j++] = encode_table[u1];
		(*outbuf)[j++] = encode_table[u2];
		if (pad == 2) {
			(*outbuf)[j++] = BASE64_PAD_CHAR;
		} else
			(*outbuf)[j++] = encode_table[u3];
		if (pad != 0) {
			(*outbuf)[j++] = BASE64_PAD_CHAR;
		} else
			(*outbuf)[j++] = encode_table[u4];
        }
	return (j);
}

/*
 * input buffer _must_ be mutiple of four size.  OBSOLETE.
 * doesn't handle \r\n in input buffer.  OBSOLETE: it handles \r\n.
 *
 * 1) Convert the character to it's Base64 decimal value.
 * 2) Convert this decimal value into binary.
 * 3) Squash the 6 bits of each character into one big string of binary digits.
 * 4) Split this string up into groups of 8 bits (starting from right to left).
 * 5) Convert each 8-bit binary value into a decimal number.
 * 6) Convert this decimal value into its US-ASCII equivalent.
 */

#define DECBYTE(u,p) do { \
	while (*(p) == '\r' || *(p) == '\n') \
		++(p); \
	if (*(p) != BASE64_PAD_CHAR) \
		u = decode_table[(int)(*(p))] & 0x3f; \
	else { \
		++pad; \
	} \
	++(p); \
} while (0)

int
base64_decode(char *inbuf, int inbuf_len, char **outbuf)
{
	unsigned char u1, u2, u3, u4;
	register int j, pad;
	register char *p;

	*outbuf = malloc(inbuf_len);
	if (*outbuf == NULL)
		return (-1);

	p = inbuf;
	u1 = u2 = u3 = u4 = 0;
	for (pad = 0, j = 0; p < inbuf + inbuf_len - 4;) {
		DECBYTE(u1, p);
		DECBYTE(u2, p);
		DECBYTE(u3, p);
		DECBYTE(u4, p);

		(*outbuf)[j] = (u1 << 2) | (u2 >> 4);
		++j;
		(*outbuf)[j] = (u2 << 4) | (u3 >> 2);

		if (pad == 1) {
			++j;
			u4 = 0;
			(*outbuf)[j] = (u3 << 6) | u4;
			break;
		} else if (pad == 2) {
			break;
		} else {
			++j;
			(*outbuf)[j] = (u3 << 6) | u4;
			++j;
		}
	}
	return (j);
}

/* What about `-' as stdout */
int
base64_encode_file(char *ifile)
{
	char ofile[256];
	int ifd, ofd/*, i = 0*/;
	struct stat stbuf;
	char *buffer;
	char tmp[64], *obuf;
	int nread, nwritten, nencoded;
	int err = 0;
	int pos, nleft, nline;
	unsigned long fsize;
#ifdef __BENCH
	clock_t jiffies;
#endif

	if (stat(ifile, &stbuf) < 0){
		fprintf(stderr, "base64: couldn't open %s\n", ifile);
		return 0;
	}

	fsize = stbuf.st_size;
	buffer = malloc(fsize);
	if (buffer == NULL) {
		fprintf(stderr, "base64: out of memory\n");
		return 0;
	}

	strncpy(ofile, ifile, 256 - (strlen(DEFAULT_ENC_FILE_POSTFIX) + 1));
	strncat(ofile, DEFAULT_ENC_FILE_POSTFIX,
 	    strlen(DEFAULT_ENC_FILE_POSTFIX));
	ofile[256 - 1] = 0;

#ifdef _WINDOWS
	if ((ifd = open(ifile, O_RDONLY | O_BINARY)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ifile);
		return (0);
	}
#else
	if ((ifd = open(ifile, O_RDONLY)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ifile);
		return (0);
	}
#endif

	if (!to_stdout && stat(ofile, &stbuf) == 0) {
		fprintf(stderr, "base64: %s exist, replace? (N/y)_ ", ofile);
		fgets(tmp, 64, stdin);

		if (tmp[0] != '\n' && ((tmp[0] == 'y' || tmp[0] == 'Y') &&
					tmp[1] == '\n') )
			;
		else {
			err = 1;
			goto out2;
		}
	}

	if (!to_stdout && /*(ofd = creat(ofile, O_RDWR | O_TRUNC) )*/
	    (ofd = open(ofile, O_CREAT | O_TRUNC | O_WRONLY,
	    S_IREAD | S_IWRITE)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ofile);
		err = 1;
		goto out1;
	}

	if (to_stdout)
		ofd = 1;

	if ((nread = __read(ifd, buffer, fsize)) < 0) {
		fprintf(stderr, "base64: IO error reading %s\n", ifile);
		err = 1;
		goto out1;
	}

	if ((nencoded = base64_encode(buffer, nread, &obuf)) < 0) {
		fprintf(stderr, "base64: error encoding %s\n", ifile);
		err = 1;
		goto out1;
	}

#ifdef __BENCH
	jiffies = clock();
#endif
	pos = 0;
	nleft = nencoded;
	while (nleft) {
		nleft = nencoded - pos;
		if (!nleft)
			break;
		if (nleft < LINELEN) {
			nline = nleft;
		} else
			nline = LINELEN;
		if ((nwritten = write(ofd, obuf + pos, nline) ) < 0) {
			fprintf(stderr, "base64: IO error writing %s\n", ofile);
			err = 1;
			goto out1;
		}
		write(ofd, CRLF, 2);
		pos += nwritten;
	}
	/*write(ofd, CRLF, 2);*/
#ifdef __BENCH
	jiffies = clock() - jiffies;
	fprintf(stderr, "No. of jiffies = %lu:%3.3f\n", jiffies,
	    jiffies / CLOCKS_PER_SEC);
#endif
	free(obuf);
out1:
	close(ofd);
out2:
	close(ifd);

	if (err)
		return (!err);
	return (1);
}

int
base64_decode_file(char *ifile)
{
	char ofile[256];
	int ifd, ofd;
	int err = 0, ndecoded, nread, nwritten;
	char *obuf, tmp[64];
	struct stat stbuf;
	char *buffer;
	unsigned long fsize;

	if (stat(ifile, &stbuf) < 0){
		fprintf(stderr, "base64: couldn't open %s\n", ifile);
		return (0);
	}

	fsize = stbuf.st_size;
	buffer = malloc(fsize);
        if (buffer == NULL)
                return (0);

	strncpy(ofile, ifile,
	    strlen(ifile) - strlen(DEFAULT_ENC_FILE_POSTFIX));      /*BIGERR*/
        ofile[strlen(ifile) - strlen(DEFAULT_ENC_FILE_POSTFIX)] = 0;
        strncat(ofile, DEFAULT_DEC_FILE_POSTFIX,
	    strlen(DEFAULT_DEC_FILE_POSTFIX) );
        ofile[256 - 1] = 0;

	if ((ifd = open(ifile, O_RDONLY)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ifile);
		return (0);
	}

	if (!to_stdout && stat(ofile, &stbuf) == 0) {
		fprintf(stderr, "base64: %s exist, replace? (N/y)_ ", ofile);
		fgets(tmp, 64, stdin);

		if (tmp[0] != '\n' &&
		    ((tmp[0] == 'y' || tmp[0] == 'Y') &&
		    tmp[1] == '\n') )
			;
		else {
			err = 1;
			goto out2;
		}
	}

#ifdef _WINDOWS
	if (!to_stdout &&
	    (ofd = open(ofile, O_CREAT | O_TRUNC | O_WRONLY | O_BINARY,
	    S_IREAD | S_IWRITE)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ofile);
		err = 1;
		goto out1;
	}
#else
	if (!to_stdout && /*(ofd = creat(ofile, O_RDWR | O_TRUNC) )*/
	    (ofd = open(ofile, O_CREAT | O_TRUNC |
	    O_WRONLY, S_IREAD | S_IWRITE)) < 0) {
		fprintf(stderr, "base64: couldn't open %s\n", ofile);
		err = 1;
		goto out1;
	}
#endif

	if (to_stdout)
		ofd = 1;

	if ((nread = __read(ifd, buffer, fsize) ) <= 0) {
		extern int errno;
		fprintf(stderr,
		    "base64: IO error reading %s: %s\n",
		    ifile, strerror(errno));
		err = 1;
		goto out1;
	}

	if ((ndecoded = base64_decode(buffer, nread, &obuf)) < 0) {
		fprintf(stderr, "base64: error decoding %s\n", ifile);
		err = 1;
		goto out1;
	}

	if ((nwritten = write(ofd, obuf, ndecoded)) < 0) {
		fprintf(stderr, "base64: IO error writing %s\n", ofile);
		err = 1;
		goto out1;
	}

	free(obuf);
out1:
	close(ofd);
out2:
	close(ifd);

	if (err)
		return (!err);
	return (1);
}

int
main(int argc, char **argv)
{
	int err;
	int op, narg;

	if (argc == 4)
		narg = 2;
	else if (argc == 3)
		narg = 1;
	else {
		usage();
		return (0);
	}

	if (!strcmp(argv[narg], "-d") )
		op = 1;
	else if (!strcmp(argv[narg], "-e") )
		op = 2;
	else {
		usage();
		return (1);
	}

	if (narg == 2 && !strcmp(argv[1], "-")) {
		to_stdout = 1;
	}

	init_base64_conv_tables();

	if (op == 2 && (err = base64_encode_file(argv[argc - 1]) < 1)) {
		fprintf(stderr, "base64: FAILED!\n");
		return (1);
	}

	if (op == 1 && (err = base64_decode_file(argv[argc - 1]) < 1) ) {
		fprintf(stderr, "base64: FAILED!\n");
		return 1;
	}
	return (0);
}

void
usage()
{

	fprintf(stderr, "base64 Rev: 16-03-2001, 30-10-2002\n");
	fprintf(stderr, "base64: usage: base64 [-] -<ed> filename\n");
	fprintf(stderr, "base64:        e base64 encode file\n");
	fprintf(stderr, "base64:        d base64 decode file\n");
	fprintf(stderr, "\n");
}
